{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trimStart","length","categ","className","onChange","target","value","type","class","placeholder","aria-label","aria-describedby","id","protoTypes","PropTypes","func","isRequired","GifGridItem","title","url","src","alt","href","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","setImages","useEffect","then","imgs","useFetchGift","role","i","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+PAGMA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAgBvC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,YAAYC,SACtBR,GAAc,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAMhB,yBAAKO,UAAU,oBACb,2BAAOC,SAhBa,SAACN,GACzBF,EAAcE,EAAEO,OAAOC,QAeiBC,KAAK,OAAOC,MAAM,eAAeC,YAAY,eAAeC,aAAW,uBAAuBC,mBAAiB,kBACnJ,yBAAKR,UAAU,sBACb,4BAAQA,UAAU,4BAA4BI,KAAK,SAASK,GAAG,iBAA/D,cAOVpB,EAAYqB,WAAa,CACrBpB,c,OAAgBqB,EAAUC,KAAKC,YAGpBxB,QCrBAyB,G,MAZK,SAAC,GAAwB,EAAtBL,GAAuB,IAAnBM,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAC9B,OACI,yBAAKhB,UAAU,aACX,yBAAKiB,IAAKD,EAAKX,MAAM,wCAAwCa,IAAKH,IAC9D,yBAAKf,UAAU,aACX,wBAAIA,UAAU,cAAce,GAC5B,uBAAGI,KAAMH,EAAKX,MAAM,kBAAkBH,OAAO,SAA7C,sB,uBCQLkB,EAhBF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAENN,EAFM,iDAE0CO,UAAUF,GAFpD,+DAGOG,MAAMR,GAHb,cAGNS,EAHM,gBAISA,EAAKC,OAJd,uBAILC,EAJK,EAILA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAM,CACFrB,GAAIqB,EAAIrB,GACRM,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAT7B,kBAaLY,GAbK,4CAAH,sDC8BEK,EA1BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EACZ9B,mBAAS,CAACwC,OAAQ,GAAIG,SAAQ,IADlB,mBACjCH,EADiC,KACzBI,EADyB,KAaxC,OAVAC,qBAAW,WACPhB,EAASC,GACJgB,MAAK,SAAAC,GACFH,EAAU,CACNJ,OAAQO,EACRJ,SAAS,SAGtB,CAACb,IAEGU,EDXmBQ,CAAalB,GAAjCU,EADwB,EACxBA,OAAQG,EADgB,EAChBA,QAEhB,OACE,oCACE,4BAAKb,GACJa,EACC,yBAAK7B,MAAM,eACT,yBAAKA,MAAM,iBAAiBmC,KAAK,UAC/B,0BAAMnC,MAAM,WAAZ,gBAGF,KACJ,yBAAKL,UAAU,QAEV+B,EAAOF,KAAI,SAACC,EAAIW,GAAL,OACV,yBAAKzC,UAAU,YACd,kBAAC,EAAD,eAAa0C,IAAKZ,EAAIrB,IAAQqB,WEE5Ba,EAlBM,WAAO,IAAD,EACWpD,mBAAS,IADpB,mBAClBqD,EADkB,KACNtD,EADM,KAIzB,OACE,oCACE,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEMsD,EAAWf,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CAASqB,IAAMrB,EAAWA,SAAUA,U,MCTpDwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.73b628f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  \r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n    \r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trimStart().length){\r\n        setCategories(categ => [ inputValue ,...categ]);\r\n        setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"input-group mb-3\">\r\n        <input onChange={handleInputChange} type=\"text\" class=\"form-control\" placeholder=\"Search Gif's\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-outline-secondary\" type=\"submit\" id=\"button-addon2\">Search</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.protoTypes = {\r\n    setCategories : PropTypes.func.isRequired \r\n}\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ( {id, title, url } ) => {\r\n    return (\r\n        <div className=\"card mb-4\" >\r\n            <img src={url} class=\"card-img-top img-fluid rounded-bottom\" alt={title}/>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{title}</h5>\r\n                    <a href={url} class=\"btn btn-primary\" target=\"blank\">Abrir en GIPHY</a>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","const getGifs = async(category) => {\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Kz5Q8ECtqYiL5pX0SFl80cJUATO458XV`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;\r\n","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGift } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { images, loading } = useFetchGift(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading ? (\r\n        <div class=\"text-center\">\r\n          <div class=\"spinner-border\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      <div className=\"row \">\r\n        \r\n          {images.map((img,i) => (\r\n            <div className=\"col-md-3\">\r\n             <GifGridItem key={img.id} {...img} />\r\n            </div>\r\n          ))}\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nexport const useFetchGift = ( category ) => {\r\n    const [images, setImages] = useState({images: [], loading:true});\r\n    \r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then(imgs => {\r\n                setImages({\r\n                    images: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n    return images;\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport '../styles/GifExpertApp.css';\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <ol>\r\n        {\r\n            categories.map( category => (\r\n                <GifGrid key={ category } category={category}/>\r\n            ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport GifExpertApp from './components/GifExpertApp';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}